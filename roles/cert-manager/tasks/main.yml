---
- name: Create cert-manager namespace
  kubernetes.core.k8s:
    name: "{{ cert_manager_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Add Jetstack Helm repository
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: https://charts.jetstack.io
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Update Helm repositories
  kubernetes.core.helm:
    name: dummy
    release_namespace: default
    state: absent
    update_repo_cache: yes
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Install cert-manager CRDs
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cert-manager-crds
        namespace: "{{ cert_manager_namespace }}"
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Apply cert-manager CRDs
  kubernetes.core.k8s:
    state: present
    src: https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Deploy cert-manager
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    release_namespace: "{{ cert_manager_namespace }}"
    create_namespace: true
    chart_version: "{{ cert_manager_version }}"
    kubeconfig: /home/{{ ansible_user }}/.kube/config
    values:
      installCRDs: false
      resources:
        requests:
          cpu: "{{ cert_manager_cpu_request }}"
          memory: "{{ cert_manager_memory_request }}"
        limits:
          cpu: "{{ cert_manager_cpu_limit }}"
          memory: "{{ cert_manager_memory_limit }}"
      webhook:
        resources:
          requests:
            cpu: "{{ cert_manager_cpu_request }}"
            memory: "{{ cert_manager_memory_request }}"
          limits:
            cpu: "{{ cert_manager_cpu_limit }}"
            memory: "{{ cert_manager_memory_limit }}"
      cainjector:
        resources:
          requests:
            cpu: "{{ cert_manager_cpu_request }}"
            memory: "{{ cert_manager_memory_request }}"
          limits:
            cpu: "{{ cert_manager_cpu_limit }}"
            memory: "{{ cert_manager_memory_limit }}"

- name: Wait for cert-manager to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: cert-manager
    namespace: "{{ cert_manager_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
    kubeconfig: /home/{{ ansible_user }}/.kube/config

- name: Create ClusterIssuer for Let's Encrypt
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: "{{ cert_manager_cluster_issuer_name }}"
      spec:
        acme:
          server: "{{ cert_manager_acme_server }}"
          email: "{{ cert_manager_email }}"
          privateKeySecretRef:
            name: "{{ cert_manager_cluster_issuer_name }}"
          solvers:
          - http01:
              ingress:
                class: nginx
    kubeconfig: /home/{{ ansible_user }}/.kube/config